set(CMAKE_CONFIGURATION_TYPES "Debug;Release")
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_C_STANDARD 17)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include_directories(include)
add_compile_definitions(HAVE_CONFIG_H)

if (NOT PEN_LIBRARY_PATH)
    set(PEN_LIBRARY_PATH "${CMAKE_BINARY_DIR}/libpen")
endif()

link_directories(${PEN_LIBRARY_PATH}/lib)
include_directories(${PEN_LIBRARY_PATH}/include)

if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(DEBUG_FLAGS "/Ob0 /Od /RTC1 /DEBUG /Zi")
    set(RELEASE_FLAGS "/O2 -DNDEBUG")
    set(WARN_FLAGS "")
    set(COMMON_FLAGS "${WARN_FLAGS}")

    set(CMAKE_C_FLAGS "${COMMON_FLAGS}")
    set(CMAKE_C_FLAGS_DEBUG "${DEBUG_FLAGS}")
    set(CMAKE_C_FLAGS_RELEASE "${RELEASE_FLAGS}")

    set(CMAKE_CXX_FLAGS "${COMMON_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG "${DEBUG_FLAGS}")
    set(CMAKE_CXX_FLAGS_RELEASE "${RELEASE_FLAGS}")
else ()
    set(DEBUG_FLAGS "-O0 -g -fsanitize=address -fno-omit-frame-pointer")
    set(RELEASE_FLAGS "-O3 -DNDEBUG")
    set(WARN_FLAGS "-Werror -Wall -Wextra -Wformat -Wmissing-include-dirs -Wuninitialized -Wno-deprecated-declarations")
    set(COMMON_FLAGS "${WARN_FLAGS}")

    set(CMAKE_C_FLAGS "${COMMON_FLAGS}")
    set(CMAKE_C_FLAGS_DEBUG "${DEBUG_FLAGS}")
    set(CMAKE_C_FLAGS_RELEASE "${RELEASE_FLAGS}")

    set(CMAKE_CXX_FLAGS "-fno-exceptions ${COMMON_FLAGS}")
    set(CMAKE_CXX_FLAGS_DEBUG "${DEBUG_FLAGS}")
    set(CMAKE_CXX_FLAGS_RELEASE "${RELEASE_FLAGS}")
endif()

include(CheckIncludeFile)
include(CheckFunctionExists)
include(CheckSymbolExists)

macro(pen_header_check head required)
    string(REGEX REPLACE "[./]" "_" FILE_UL ${head})
    string(TOUPPER "${FILE_UL}" FILE_UL_UPPER)
    set(HAVE_FILE_DEF "HAVE_${FILE_UL_UPPER}")
    check_include_file(${head} ${HAVE_FILE_DEF})
    if (${required} AND NOT ${HAVE_FILE_DEF})
        message(FATAL_ERROR "unable to find header '${head}'")
    endif()
endmacro()

macro(pen_headers_check headlist)
    foreach(head ${headlist})
        pen_header_check(${head} 0)
    endforeach()
endmacro()

macro(pen_headers_check_required headlist)
    foreach(head ${headlist})
        pen_header_check(${head} 1)
    endforeach()
endmacro()

macro(pen_function_check func required)
    string(REGEX REPLACE "[./]" "_" FUNC_UL ${func})
    string(TOUPPER "${FUNC_UL}" FUNC_UL_UPPER)
    set(HAVE_FUNC_DEF "HAVE_${FUNC_UL_UPPER}")
    check_function_exists(${func} ${HAVE_FUNC_DEF})
    if (${required} AND NOT ${HAVE_FUNC_DEF})
        message(FATAL_ERROR "unable to find function '${func}'")
    endif()
endmacro()

macro(pen_symbol_check func head)
    string(REGEX REPLACE "[./]" "_" FUNC_UL ${func})
    string(TOUPPER "${FUNC_UL}" FUNC_UL_UPPER)
    set(HAVE_FUNC_DEF "HAVE_${FUNC_UL_UPPER}")
    check_symbol_exists(${func} ${head} ${HAVE_FUNC_DEF})
endmacro()

macro(pen_symbol_check_required func head)
    pen_symbol_check(func head)
    if (NOT ${value})
        message(FATAL_ERROR "unable to find function '${func}'")
    endif()
endmacro()

function(pen_soversion dest)
    set_target_properties(${dest} PROPERTIES
        VERSION ${PROJECT_VERSION}
        SOVERSION ${PROJECT_VERSION_MAJOR}
    )
endfunction()

function(pen_thread_check)
    check_include_file("threads.h" HAVE_THREADS_H)
    if (NOT HAVE_THREADS_H)
        check_include_file("pthreads.h" HAVE_PTHREADS_H)
        if (HAVE_PTHREADS_H)
            link_libraries(pthread)
        endif()
    else()
        if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
            link_libraries(stdthreads)
        else()
            link_libraries(pthread)
            set(CMAKE_C_FLAGS "-pthread ${CMAKE_C_FLAGS}")
            set(CMAKE_CXX_FLAGS "-pthread ${CMAKE_CXX_FLAGS}")
        endif()
    endif()
endfunction()

function(pen_package_name base ret)
    set(local "${base}-${PROJECT_VERSION}-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}")
    string(TOLOWER ${local} local)
    set(${ret} ${local} PARENT_SCOPE)
endfunction()

pen_package_name(${PROJECT_NAME} PEN_CPACK_NAME)
set(CPACK_PACKAGE_FILE_NAME ${PEN_CPACK_NAME})
set(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
if (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(CPACK_GENERATOR "7Z")
    set(pen_ext ".7z")
else()
    set(CPACK_GENERATOR "TGZ")
    set(pen_ext ".tar.gz")
endif()
include(CPack)

function(pen_add_package url name)
    if (NOT DEFINED ENV{PEN_FILE_SERVER})
        message(FATAL_ERROR "Unknown download url")
    endif()
    message(STATUS "Downloading ${name} ...")

    set(pen_url https://$ENV{PEN_FILE_SERVER}${url}/${name})

    set(retry 3)
    while(retry)
        math(EXPR retry "${retry} - 1")
        file(DOWNLOAD ${pen_url} ${name} STATUS download_status)
        list(GET download_status 0 STATUS_CODE)
        list(GET download_status 1 ERROR_MESSAGE)
        if (${STATUS_CODE} EQUAL 0)
            message(STATUS "Download ${name} successfully")
            break()
        elseif(retry)
            message(STATUS "download terminated: ${ERROR_MESSAGE}, retries left: ${retry}")
        else()
            message(FATAL_ERROR "Download ${name} failed: ${ERROR_MESSAGE}")
        endif()
    endwhile()

    file(ARCHIVE_EXTRACT INPUT ${name} DESTINATION ${PEN_LIBRARY_PATH})
endfunction()

function(pen_package_check name)
    if (NOT EXISTS ${PEN_LIBRARY_PATH}/include/${name})
        pen_package_name(${name} package_name)
        set(tar_name "${package_name}${pen_ext}")
        pen_add_package("/fs/app/${PROJECT_VERSION}" ${tar_name})
    endif()
    if (NOT ${name} STREQUAL "pen_test")
        link_libraries(${name})
    endif()
endfunction()

function(pen_package_check_target name target)
    if (NOT EXISTS ${PEN_LIBRARY_PATH}/include/${name})
        pen_package_name(${name} package_name)
        set(tar_name "${package_name}${pen_ext}")
        pen_add_package("/fs/app/${PROJECT_VERSION}" ${tar_name})
    endif()
    if (NOT ${name} STREQUAL "pen_test")
        target_link_libraries(${target} ${name})
    endif()
endfunction()

function(pen_gtest_check)
    if (NOT EXISTS ${PEN_LIBRARY_PATH}/gtest)
        set(tar_name "googletest-${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR}${pen_ext}")
        string(TOLOWER ${tar_name} tar_name)
        pen_add_package("/fs/app" ${tar_name})
    endif()
endfunction()

if(NOT CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_custom_target(upload COMMAND
        ${CMAKE_COMMAND}
            -DPEN_UPLOAD_FILE_NAME=${CMAKE_BINARY_DIR}/${PEN_CPACK_NAME}${pen_ext}
            -DVERSION=${PROJECT_VERSION}
            -P ${CMAKE_SOURCE_DIR}/cmake/pen_upload.cmake
    )
endif()

